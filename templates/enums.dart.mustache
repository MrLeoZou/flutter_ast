import 'package:flutter/material.dart';

import 'dynamic.dart';

int getEnumIndex(String value, String type, [int fallback]) {
    if (value == null) return fallback;
    String description = value.toString();
    if (int.tryParse(description) != null) return int.tryParse(description);
    if (description.contains('.')) description = description.split('.').last;
    return getEnumValues(type)?.toList()?.indexOf(description) ?? fallback;
}

Set<String> getEnumValues(String type) => allEnumValues[type];

{{#enums}}
const Set<String> _{{type}}Values = {
{{#values}}
    '{{name}}',
{{/values}}
};
{{/enums}}


const Map<String, Set<String>> allEnumValues = {
{{#enums}}
   '{{type}}' : _{{type}}Values,
{{/enums}}
};

dynamic parseEnum(String value, String type, [dynamic fallback]) {
    if (value == null) return fallback;
    if (value.contains('.')) {
        value = value.split('.').last;
    }
    final index = getEnumIndex(value, type);
    if (index != null && index != -1) {
        switch (type) {
            {{#enums}}
            case '{{type}}':
                return {{type}}.values[index];
            {{/enums}}
            default:
                break;
        }
    }
return fallback;
}

{{#enums}}
class {{type}}Type extends Core<{{type}}> {
    {{type}}Type(data, WidgetUpdate onUpdate, [{{type}} fallback]) : super(data, onUpdate, fallback);
}

{{/enums}}