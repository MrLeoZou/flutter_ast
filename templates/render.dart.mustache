import 'dart:convert';

import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/material.dart';
import 'package:flutter/gestures.dart';

{{#imports}}
import '{{path}}';
{{/imports}}

import '../dynamic.dart';

{{#comments}}
/// {{comments}}
{{/comments}}
class {{ class }}Render extends GeneratedStatelessWidget {
  {{ class }}Render(this.widgetData, this.onUpdate) :
  {{#properties}}
    this.{{name}} = {{type}}Type(widgetData, (val) {
        Map<String, dynamic> _data = clone(widgetData);
        _data['params']['{{name}}'] = val;
        onUpdate(_data);
      }),
  {{/properties}}
  assert(widgetData != null);

  @override
  final Map<String, dynamic> widgetData;

  @override
  final void Function(Map<String, dynamic>) onUpdate;

  {{#properties}}
    final Core {{name}};
  {{/properties}}

  @override
  Map<String, dynamic> toJson() {
    return {
      "name": '{{ class }}',
      "params": {
        {{#properties}}
          "{{name}}": {
            "type": "{{type}}",
            "value": this.{{name}},
          },
        {{/properties}}
      }
    };
  }

  @override
  Map<String, WidgetProp> get properties => {
    {{#properties}}
      "{{name}}": WidgetProp('{{name}}', '{{type}}',
      {{#value}}
        value: {{value}},
      {{/value}}
      ),
    {{/properties}}
  };

  @override
  String generate() {
    return '''
    {{ class }}(
      {{#properties}}
        {{#position}}
          {{name}},
        {{/position}}
        {{^position}}
         {{name}}: ${{{name}}},
        {{/position}}
      {{/properties}}
    )
    ''';
  }

  @override
  Widget render(BuildContext context) {
    return {{ class }}(
      {{#properties}}
        {{#position}}
          {{name}}?.value,
        {{/position}}
        {{^position}}
         {{name}}: {{name}}?.value,
        {{/position}}
      {{/properties}}
    );
  }

  @override
  Widget build(BuildContext context) => render(context);

  @override
  void debugFillProperties(DiagnosticPropertiesBuilder properties) {
    super.debugFillProperties(properties);
    {{#properties}}
      {{#position}}
         properties.add(DiagnosticsProperty<Core>('{{name}}', {{name}}?.value));
      {{/position}}
      {{^position}}
        properties.add(DiagnosticsProperty<Core>('{{name}}', {{name}}?.value));
      {{/position}}
    {{/properties}}
  }
}