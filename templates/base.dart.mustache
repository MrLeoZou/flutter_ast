import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/gestures.dart';
{{#imports}}
{{path}}
{{/imports}}
{{#classes}}

class {{class}}Render<T> extends StatelessWidget {

  const {{class}}Render({
    @required this.wData,
    @required this.wUpdate,
  });

  @override
  final Map<String, dynamic> wData;

  @override
  final VoidCallback wUpdate;

  {{#fields}}
  {{type}} get {{name}} {
    return null;
  }

  set {{name}}({{type}} val) {
    if (val == this.{{name}}) {
      return;
    }
  }

  {{/fields}}

  @override
  Map<String, dynamic> get staticFields => {
  {{#static}}
  '{{name}}': {{value}},
  {{/static}}
  };

  @override
  String get description {
    final sb = StringBuffer();
    {{#comments}}
    sb.writeln("{{line}}");
    {{/comments}}
    return sb.toString();
  }

  @override
  Map<String, Object> get constructors {
     return <String, Object>{
    {{#constructors}}
    '{{name}}': {{className}}(
      {{#props}}
       {{key}} {{separator}} this.{{name}},
      {{/props}}
    ),
    {{/constructors}}
    };
  }

  @override
  Widget build(BuildContext context) {
    if (isWidget) return defaultBase;
    return Container();
  }

  @override
  bool get isWidget => defaultBase is Widget;
  
  @override
  Object get defaultBase => constructors['default'];

  @override
  void debugFillProperties(DiagnosticPropertiesBuilder properties) {
    super.debugFillProperties(properties);
    {{#fields}}
      properties.add(DiagnosticsProperty('{{name}}', this.{{name}}));
    {{/fields}}
  }
}

{{/classes}}